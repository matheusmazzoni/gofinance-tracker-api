name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
      
      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m
      
      - name: Run linters
        run: make lint

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
      
      - name: Install Dependencies
        run: |
          go install github.com/jstemmer/go-junit-report/v2@latest
          make download
      
      - name: Run Tests
        run: make test-ci
      
      - name: Test Report
        uses: dorny/test-reporter@v2
        if: success() || failure()
        with:
          name: Go Test Results
          path: test-report.xml
          reporter: java-junit
      
      - name: Generate Coverage
        run: make coverage
      
      - name: Upload Coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out

  build-push-release:
    needs: test
    name: Build and Push Docker Image
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      security-events: write
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        id: semantic
        with:
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        if: steps.semantic.outputs.new_release_published == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=true
            type=semver,pattern={{version}},value=${{ steps.semantic.outputs.new_release_version }}

      - name: Build Docker image
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:scanner
          labels: ${{ steps.meta.outputs.labels }}

      - name: Run Trivy vulnerability scanner
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:scanner'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Push Docker image
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: Deploy
    needs: build-push-release
    if: needs.build-push-release.outputs.new_release_published == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Deploy to production
        run: |
          echo "ðŸš€ Deploying version ${{ needs.build-push-release.outputs.new_release_version }} to production..."
