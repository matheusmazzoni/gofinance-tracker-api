basePath: /v1
definitions:
  dto.AccountRequest:
    properties:
      credit_limit:
        example: 5000
        type: number
      initial_balance:
        example: 1000.5
        type: number
      name:
        example: Nubank Account
        maxLength: 100
        minLength: 2
        type: string
      payment_due_day:
        example: 5
        type: integer
      statement_closing_day:
        example: 28
        type: integer
      type:
        allOf:
        - $ref: '#/definitions/model.AccountType'
        enum:
        - checking
        - savings
        - credit_card
        - other
        example: checking
    required:
    - initial_balance
    - name
    - type
    type: object
  dto.AccountResponse:
    properties:
      balance:
        type: number
      closing_day:
        type: integer
      credit_limit:
        type: number
      due_day:
        type: integer
      id:
        type: integer
      initial_balance:
        type: number
      name:
        type: string
      type:
        $ref: '#/definitions/model.AccountType'
      user_id:
        type: integer
    type: object
  dto.BudgetResponse:
    properties:
      amount:
        description: The planned budget amount
        type: number
      balance:
        description: The remaining balance (Amount - Spent)
        type: number
      category_id:
        type: integer
      category_name:
        type: string
      created_at:
        type: string
      id:
        type: integer
      month:
        type: integer
      spent_amount:
        description: The calculated amount spent so far
        type: number
      year:
        type: integer
    type: object
  dto.CategoryRequest:
    properties:
      name:
        minLength: 2
        type: string
    required:
    - name
    type: object
  dto.CategoryResponse:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  dto.CreateBudgetRequest:
    properties:
      amount:
        type: number
      category_id:
        type: integer
      month:
        maximum: 12
        minimum: 1
        type: integer
      year:
        type: integer
    required:
    - amount
    - category_id
    - month
    - year
    type: object
  dto.CreateTransactionRequest:
    properties:
      account_id:
        type: integer
      amount:
        type: number
      category_id:
        description: Opcional
        type: integer
      date:
        type: string
      description:
        type: string
      destination_account_id:
        description: Opcional, mas necessário para transferências
        type: integer
      type:
        $ref: '#/definitions/model.TransactionType'
    type: object
  dto.CreateUserRequest:
    properties:
      email:
        type: string
      name:
        minLength: 2
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  dto.ErrorResponse:
    properties:
      details:
        additionalProperties:
          type: string
        type: object
      error:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      token:
        type: string
    type: object
  dto.PatchTransactionRequest:
    properties:
      account_id:
        type: integer
      amount:
        type: number
      category_id:
        type: integer
      date:
        type: string
      description:
        type: string
      type:
        $ref: '#/definitions/model.TransactionType'
    type: object
  dto.StatementPeriod:
    properties:
      end:
        type: string
      start:
        type: string
    type: object
  dto.StatementResponse:
    properties:
      account_name:
        type: string
      payment_due_date:
        type: string
      period:
        $ref: '#/definitions/dto.StatementPeriod'
      statement_total:
        type: number
      transactions:
        description: We reuse the existing TransactionResponse DTO
        items:
          $ref: '#/definitions/dto.TransactionResponse'
        type: array
    type: object
  dto.TransactionResponse:
    properties:
      account_id:
        type: integer
      account_name:
        type: string
      amount:
        type: number
      category_id:
        type: integer
      category_name:
        type: string
      created_at:
        type: string
      date:
        type: string
      description:
        type: string
      destination_account_id:
        type: integer
      id:
        type: integer
      type:
        $ref: '#/definitions/model.TransactionType'
    type: object
  dto.UpdateBudgetRequest:
    properties:
      amount:
        type: number
    required:
    - amount
    type: object
  dto.UpdateTransactionRequest:
    properties:
      account_id:
        type: integer
      amount:
        type: number
      category_id:
        type: integer
      date:
        type: string
      description:
        type: string
      destination_account_id:
        type: integer
      type:
        $ref: '#/definitions/model.TransactionType'
    required:
    - account_id
    - amount
    - date
    - description
    - type
    type: object
  dto.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  model.AccountType:
    enum:
    - checking
    - savings
    - credit_card
    - other
    type: string
    x-enum-varnames:
    - Checking
    - Savings
    - CreditCard
    - Other
  model.TransactionType:
    enum:
    - income
    - expense
    - transfer
    type: string
    x-enum-varnames:
    - Income
    - Expense
    - Transfer
host: localhost:8080
info:
  contact: {}
  description: Esta é uma API para gerenciamento de finanças pessoais.
  title: API do Sistema Financeiro
  version: "1.0"
paths:
  /accounts:
    get:
      description: Returns an array with all of the logged-in user's accounts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.AccountResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List all user accounts
      tags:
      - accounts
    post:
      consumes:
      - application/json
      description: Adds a new financial account to the logged-in user's system
      parameters:
      - description: Account Data for Creation
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/dto.AccountRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.AccountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new account
      tags:
      - accounts
  /accounts/{id}:
    delete:
      description: Removes an account from the system. It will fail if the account
        has associated transactions.
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an account
      tags:
      - accounts
    get:
      description: Returns the details of a single account belonging to the logged-in
        user
      parameters:
      - description: Account Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AccountResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get an account by ID
      tags:
      - accounts
    put:
      consumes:
      - application/json
      description: Updates the details of an existing account
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: integer
      - description: Data for Update
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/dto.AccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AccountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an account
      tags:
      - accounts
  /accounts/{id}/statement:
    get:
      description: Retrieves all transactions and balance details for a specific credit
        card billing cycle. Defaults to the current statement if month/year are not
        provided.
      parameters:
      - description: Account Id
        in: path
        name: id
        required: true
        type: integer
      - description: The month of the statement's due date (1-12)
        in: query
        name: month
        type: integer
      - description: The year of the statement's due date (e.g., 2025)
        in: query
        name: year
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.StatementResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a credit card statement
      tags:
      - accounts
  /auth/login:
    post:
      consumes:
      - application/json
      description: Autentica o usuário e retorna um token JWT
      parameters:
      - description: Credenciais de Login
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Realiza o login do usuário
      tags:
      - auth
  /budgets:
    get:
      description: Retrieves all budgets for the user for a specific month and year.
        Defaults to the current month/year.
      parameters:
      - description: Month to filter (1-12)
        in: query
        name: month
        type: integer
      - description: Year to filter (e.g., 2025)
        in: query
        name: year
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.BudgetResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Lists budgets for a given period
      tags:
      - budgets
    post:
      consumes:
      - application/json
      description: Adds a new monthly budget for a specific category.
      parameters:
      - description: Budget Creation Data
        in: body
        name: budget
        required: true
        schema:
          $ref: '#/definitions/dto.CreateBudgetRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.BudgetResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Creates a new budget
      tags:
      - budgets
  /budgets/{id}:
    delete:
      description: Removes a budget for a specific category and period.
      parameters:
      - description: Budget Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Deletes a budget
      tags:
      - budgets
    put:
      consumes:
      - application/json
      description: Changes the amount for an existing budget.
      parameters:
      - description: Budget Id
        in: path
        name: id
        required: true
        type: integer
      - description: New Budget Amount
        in: body
        name: budget
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateBudgetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BudgetResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Updates a budget's amount
      tags:
      - budgets
  /categories:
    get:
      description: Retorna um array com todas as categorias do usuário logado
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.CategoryResponse'
            type: array
      security:
      - BearerAuth: []
      summary: Lista todas as categorias do usuário
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Adiciona uma nova categoria financeira ao sistema
      parameters:
      - description: Dados da Conta
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/dto.CategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CategoryResponse'
      security:
      - BearerAuth: []
      summary: Cria uma nova categoria
      tags:
      - categories
  /categories/{id}:
    delete:
      description: Remove uma categoria do sistema
      parameters:
      - description: Id da Conta
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Deleta uma categoria
      tags:
      - categories
    get:
      description: Retorna os detalhes de uma única categoria
      parameters:
      - description: Id da Conta
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CategoryResponse'
      security:
      - BearerAuth: []
      summary: Busca uma categoria pelo ID
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: Atualiza os detalhes de uma categoria existente
      parameters:
      - description: Id da Conta
        in: path
        name: id
        required: true
        type: integer
      - description: Dados para Atualizar
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/dto.CategoryResponse'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CategoryResponse'
      security:
      - BearerAuth: []
      summary: Atualiza uma categoria
      tags:
      - categories
  /transactions:
    get:
      description: Retrieves a list of transactions for the authenticated user, with
        optional filters.
      parameters:
      - description: Search text in description (case-insensitive)
        in: query
        name: description
        type: string
      - description: Filter by type (income, expense, transfer)
        enum:
        - income
        - expense
        - transfer
        in: query
        name: type
        type: string
      - description: Filter by a specific account Id
        in: query
        name: account_id
        type: integer
      - description: 'Filter by start date (format: YYYY-MM-DD)'
        in: query
        name: start_date
        type: string
      - description: 'Filter by end date (format: YYYY-MM-DD)'
        in: query
        name: end_date
        type: string
      - description: Filter by one or more category Ids (comma-separated, e.g., 1,5,8)
        in: query
        name: category_ids
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.TransactionResponse'
            type: array
      security:
      - BearerAuth: []
      summary: Lists and filters user transactions
      tags:
      - transactions
    post:
      consumes:
      - application/json
      description: Adiciona uma nova transação ao sistema. Para transferências, o
        campo destination_account_id é obrigatório.
      parameters:
      - description: Dados da Transação para Criar
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/dto.CreateTransactionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.TransactionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Cria uma nova transação
      tags:
      - transactions
  /transactions/{id}:
    delete:
      description: Remove uma transação do sistema pelo seu Id
      parameters:
      - description: Id da Transação
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Deleta uma transação
      tags:
      - transactions
    get:
      description: Retorna os detalhes de uma única transação
      parameters:
      - description: Id da Transação
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TransactionResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Busca uma transação pelo Id
      tags:
      - transactions
    patch:
      consumes:
      - application/json
      description: Atualiza um ou mais campos de uma transação. Apenas os campos fornecidos
        no corpo serão alterados.
      parameters:
      - description: Transaction Id
        in: path
        name: id
        required: true
        type: integer
      - description: Fields to Update
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/dto.PatchTransactionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TransactionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Atualiza uma transação parcialmente
      tags:
      - transactions
    put:
      consumes:
      - application/json
      description: Atualiza os detalhes de uma transação com base no seu Id
      parameters:
      - description: Id da Transação
        in: path
        name: id
        required: true
        type: integer
      - description: Dados para Atualizar
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateTransactionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TransactionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Atualiza uma transação existente
      tags:
      - transactions
  /users:
    post:
      consumes:
      - application/json
      description: Cria um novo usuário no sistema.
      parameters:
      - description: Dados do Usuário para Registro
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Registra um novo usuário
      tags:
      - users
  /users/me:
    get:
      description: Retorna os dados do usuário que está fazendo a requisição.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Busca o perfil do usuário logado
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
